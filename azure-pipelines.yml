resources:
 repositories:
   - repository: osprey
     type: github
     name: donaldlab/OSPREY3
     endpoint: donaldlab
   - repository: molscope
     type: github
     name: donaldlab/molscope
     endpoint: donaldlab
   - repository: ospreyservice
     type: github
     name: donaldlab/osprey-service
     endpoint: donaldlab
   - repository: kludge
     type: github
     name: cuchaz/kludge
     endpoint: donaldlab

trigger:
- master

jobs:
- job: Assemble
  strategy:
    matrix:
      linux:
        imageName: ubuntu-latest
        openJdkUrl: https://download.java.net/java/GA/jdk14.0.1/664493ef4a6946b186ff29eb326336a2/7/GPL/
        jdkName: openjdk-14.0.1_linux-x64_bin.tar.gz
        javaHome: $(Build.BinariesDirectory)/java/jdk-14.0.1
        gradleWrapper: gradlew
      # mac:
      #   imageName: macos-latest
      #   openJdkUrl: https://download.java.net/java/GA/jdk14.0.1/664493ef4a6946b186ff29eb326336a2/7/GPL/
      #   jdkName: openjdk-14.0.1_osx-x64_bin.tar.gz
      #   javaHome: $(Build.BinariesDirectory)/java/jdk-14.0.1.jdk/Contents/Home/
      #   gradleWrapper: gradlew
      # windows:
      #   imageName: windows-latest
      #   openJdkUrl: https://download.java.net/java/GA/jdk14.0.1/664493ef4a6946b186ff29eb326336a2/7/GPL/
      #   jdkName: openjdk-14.0.1_windows-x64_bin.zip
      #   javaHome: $(Build.BinariesDirectory)/java/jdk-14.0.1
      #   gradleWrapper: gradlew.bat

  pool:
    vmImage: $(imageName)

  # Get the source code for the repositories and all dependencies
  steps:
  - checkout: osprey
    fetchDepth: 1
  - checkout: molscope
    fetchDepth: 1
  - checkout: ospreyservice
    fetchDepth: 1
  - checkout: kludge
    fetchDepth: 1
  - checkout: self
    fetchDepth: 1

  # Download the JDK
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: 'curl --silent --remote-name $(openJdkUrl)$(jdkName)'
      workingDirectory: '$(Build.BinariesDirectory)'
    displayName: Download OpenJDK

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: |
        $(Build.BinariesDirectory)/*.zip
        $(Build.BinariesDirectory)/*.tar.gz
      destinationFolder: $(Build.BinariesDirectory)/java
      cleanDestinationFolder: true

  # Install WiX toolset on Windows, which is needed for jpackage
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: 'choco install wixtoolset'
    displayName: "Install WiX Toolset"
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

  # Create the jpackage runtime image
  - task: Bash@3
    inputs:
      targetType: 'inline'
      script: |
        function standardize_path {
          echo `echo "$1" | sed 's/\\\/\\//g'`
        }

        export JAVA_HOME=$(standardize_path "$(javaHome)")
        molscope_path=`standardize_path "$(Build.SourcesDirectory)/molscope"`
        osprey_path=`standardize_path "$(Build.SourcesDirectory)/OSPREY3"`
        ospreyservice_path=`standardize_path "$(Build.SourcesDirectory)/osprey-service"`
        kludge_path=`standardize_path "$(Build.SourcesDirectory)/kludge"`
        jpackage_home=`standardize_path "$(javaHome)"`

        ./$(gradleWrapper) \
            -Dmolscope.path=$molscope_path \
            -Dosprey.path=$osprey_path \
            -Dospreyservice.path=$ospreyservice_path \
            -Dkludge.path=$kludge_path \
            -Djpackage.home=$jpackage_home \
            -PbuildId=$(Build.BuildId) \
            jpackage

        version=`./$(gradleWrapper) \
            -Dmolscope.path=$molscope_path \
            -Dosprey.path=$osprey_path \
            -Dospreyservice.path=$ospreyservice_path \
            -Dkludge.path=$kludge_path \
            -Djpackage.home=$jpackage_home \
            -PbuildId=$(Build.BuildId) \
            --quiet versionString | tr -d '\n'`

        echo "##vso[task.setvariable variable=version;isOutput=true;]${version}"

      workingDirectory: 'osprey-gui'
    displayName: Run gradlew jpackage
    name: PackageAndVersion

  - task: CopyFiles@2
    inputs:
      SourceFolder: 'osprey-gui/build/jpackage'
      Contents: |
        *.deb
        *.msi
        *.dmg
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: Copy jpackage output to staging dir

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: $(Agent.OS)
      publishLocation: 'Container'
    displayName: Make staging dir an artifact

- job: CreateRelease
  pool:
    vmImage: ubuntu-latest
  dependsOn: Assemble
  variables: 
    version: $[ dependencies.Assemble.outputs['PackageAndVersion.version'] ]
#  condition: ne(variables['Build.Reason'], 'PullRequest')
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download assembled artifacts
  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'github.com_gusennan'
      repositoryName: '$(Build.Repository.Name)'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'userSpecifiedTag'
      tag: '$(version)'
      assets: '$(System.ArtifactsDirectory)/**/*sprey*'
      isDraft: true
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
      title: 'CI release of $(version)'
    displayName: Push draft release $(version)